{"version":3,"sources":["data/cleanTrain.csv","data/cleanTest.csv","components/DataProvider.js","components/getModel.js","components/trainModel.js","App.js","reportWebVitals.js","index.js"],"names":["DataContex","createContext","DataProvider","children","useState","trainX","setTrainX","trainY","setTrainY","testX","setTestX","testY","setTestY","split","a","csv","dfd","data","console","log","shape","dataX","iloc","columns","tensor","dataY","trainCsv","testCsv","wrapReadData","Provider","value","getModel","inputShape","model","tf","add","dense","units","activation","kernelInitializer","compile","optimizer","loss","metrics","setModel","fit","batchSize","epochs","validationData","App","document","title","useContext","useEffect","trainModel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gcAAe,MAA0B,uCCA1B,MAA0B,sC,SCKnCA,EAAaC,0BAGJ,SAASC,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SACrC,EAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA0BN,mBAAS,MAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAJiD,4CAMjD,iBACiBC,EADjB,2BAAAC,EAAA,iGAAAA,EAAA,MACE,WAAqBC,GAArB,mBAAAD,EAAA,sEACqBE,WAAaD,GADlC,cACQE,EADR,OAEEC,QAAQC,IAAI,OAAQF,EAAKG,MAAM,IACzBC,EAAQJ,EAAKK,KAAK,CAAEC,QAAS,CAAC,QAASC,OACvCC,EAAQR,EAAI,SAAaO,OAJjC,kBAKS,CAACH,EAAOI,IALjB,4CADF,uBACiBZ,EADjB,qDAQiCA,EAAMa,GARvC,0CAQSrB,EART,KAQiBE,EARjB,eAS+BM,EAAMc,GATrC,oCASSlB,EATT,KASgBE,EAThB,KAUEL,EAAUD,GACVG,EAAUD,GACVG,EAASD,GACTG,EAASD,GAbX,4CANiD,wBAyBjD,OAJKN,GAAWE,GAAWE,GAAUE,GArBY,mCAsB/CiB,GAIA,cAAC5B,EAAW6B,SAAZ,CAAqBC,MAAO,CAAEzB,SAAQE,SAAQE,QAAOE,SAArD,SACGR,I,YCjCQ,SAAS4B,EAASC,GAC/B,IAAMC,EAAQC,eAyBd,OAvBAD,EAAME,IACJD,SAAUE,MAAM,CACdJ,aACAK,MAAO,IACPC,WAAY,OACZC,kBAAmB,cAGvBN,EAAME,IAAID,SAAUE,MAAM,CAAEC,MAAO,GAAIC,WAAY,UACnDL,EAAME,IAAID,SAAUE,MAAM,CAAEC,MAAO,GAAIC,WAAY,UACnDL,EAAME,IACJD,SAAUE,MAAM,CACdC,MAAO,EACPC,WAAY,aAIhBL,EAAMO,QAAQ,CACZC,UAAW,OACXC,KAAM,qBACNC,QAAS,CAAC,cAGLV,E,4CCzBM,WACb5B,EACAE,EACAE,EACAE,EACAiC,GALa,iBAAA9B,EAAA,6DAOPkB,EAAa3B,EAAOe,MAAM,GAC1Ba,EAAQF,EAASC,GARV,SASPC,EAAMY,IAAIxC,EAAQE,EAAQ,CAC9BuC,UAAW,GACXC,OAAQ,EACRC,eAAgB,CAACvC,EAAOE,KAZb,OAebiC,EAASX,GAfI,4C,sBCEA,SAASgB,IACtBC,SAASC,MAAQ,UACjB,MAA0B/C,mBAAS,qBAAnC,mBAAO6B,EAAP,KAAcW,EAAd,KACA,EHF2BQ,qBAAWpD,GGEhCK,EAAN,EAAMA,OAAQE,EAAd,EAAcA,OAAQE,EAAtB,EAAsBA,MAAOE,EAA7B,EAA6BA,MAW7B,OATA0C,qBAAU,WACJhD,GAAUE,GAAUE,GAASE,GDRtB,SAAf,mCCSM2C,CAAWjD,EAAQE,EAAQE,EAAOE,EAAOiC,KAE1C,CAACvC,EAAQE,EAAQE,EAAOE,IAE3BO,QAAQC,IAAIc,GAGL,KCnBT,IAYesB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChE,EAAD,UACE,cAAC,EAAD,QAGJgD,SAASiB,eAAe,SAM1BZ,M","file":"static/js/main.d1c1cc78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cleanTrain.53b0efcd.csv\";","export default __webpack_public_path__ + \"static/media/cleanTest.fde2728e.csv\";","import React, { createContext, useContext, useState } from \"react\";\r\nimport * as dfd from \"danfojs\";\r\nimport trainCsv from \"../data/cleanTrain.csv\";\r\nimport testCsv from \"../data/cleanTest.csv\";\r\n\r\nconst DataContex = createContext();\r\nexport const useData = () => useContext(DataContex);\r\n\r\nexport default function DataProvider({ children }) {\r\n  const [trainX, setTrainX] = useState(null);\r\n  const [trainY, setTrainY] = useState(null);\r\n  const [testX, setTestX] = useState(null);\r\n  const [testY, setTestY] = useState(null);\r\n\r\n  async function wrapReadData() {\r\n    async function split(csv) {\r\n      const data = await dfd.read_csv(csv);\r\n      console.log(\"size\", data.shape[0]);\r\n      const dataX = data.iloc({ columns: [\"1:\"] }).tensor;\r\n      const dataY = data[\"Survived\"].tensor;\r\n      return [dataX, dataY];\r\n    }\r\n    const [trainX, trainY] = await split(trainCsv);\r\n    const [testX, testY] = await split(testCsv);\r\n    setTrainX(trainX);\r\n    setTrainY(trainY);\r\n    setTestX(testX);\r\n    setTestY(testY);\r\n  }\r\n  if (!trainX && !trainY && !testX && !testY) {\r\n    wrapReadData();\r\n  }\r\n\r\n  return (\r\n    <DataContex.Provider value={{ trainX, trainY, testX, testY }}>\r\n      {children}\r\n    </DataContex.Provider>\r\n  );\r\n}\r\n","import * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function getModel(inputShape) {\r\n  const model = tf.sequential();\r\n\r\n  model.add(\r\n    tf.layers.dense({\r\n      inputShape,\r\n      units: 120,\r\n      activation: \"relu\",\r\n      kernelInitializer: \"heNormal\",\r\n    })\r\n  );\r\n  model.add(tf.layers.dense({ units: 64, activation: \"relu\" }));\r\n  model.add(tf.layers.dense({ units: 32, activation: \"relu\" }));\r\n  model.add(\r\n    tf.layers.dense({\r\n      units: 1,\r\n      activation: \"sigmoid\",\r\n    })\r\n  );\r\n\r\n  model.compile({\r\n    optimizer: \"adam\",\r\n    loss: \"binaryCrossentropy\",\r\n    metrics: [\"accuracy\"],\r\n  });\r\n\r\n  return model;\r\n}\r\n","import * as tf from \"@tensorflow/tfjs\";\r\nimport getModel from \"./getModel.js\";\r\n\r\nexport default async function trainModel(\r\n  trainX,\r\n  trainY,\r\n  testX,\r\n  testY,\r\n  setModel\r\n) {\r\n  const inputShape = trainX.shape[1];\r\n  const model = getModel(inputShape);\r\n  await model.fit(trainX, trainY, {\r\n    batchSize: 32,\r\n    epochs: 2,\r\n    validationData: [testX, testY],\r\n  });\r\n\r\n  setModel(model);\r\n}\r\n","import \"./App.css\";\nimport { useData } from \"./components/DataProvider.js\";\nimport trainModel from \"./components/trainModel.js\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function App() {\n  document.title = \"titanic\";\n  const [model, setModel] = useState(\"calculating model\");\n  let { trainX, trainY, testX, testY } = useData();\n\n  useEffect(() => {\n    if (trainX && trainY && testX && testY) {\n      trainModel(trainX, trainY, testX, testY, setModel);\n    }\n  }, [trainX, trainY, testX, testY]);\n\n  console.log(model);\n\n  // return <pre>{JSON.stringify(model, null, 2)}</pre>;\n  return null;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport DataProvider from \"./components/DataProvider.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}