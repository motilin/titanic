{"version":3,"sources":["data/cleanTrain.csv","data/cleanTest.csv","components/DataProvider.js","App.js","reportWebVitals.js","index.js"],"names":["DataContex","createContext","DataProvider","children","useState","train","setTrain","test","setTest","a","d3","trainCsv","trn","testCsv","tst","wrapReadData","Provider","value","App","document","title","useContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8WAAe,MAA0B,uCCA1B,MAA0B,sC,SCMnCA,EAAaC,0BAGJ,SAASC,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SACrC,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAFiD,4CAIjD,8BAAAC,EAAA,sEACoBC,IAAOC,GAD3B,cACQC,EADR,gBAEoBF,IAAOG,GAF3B,OAEQC,EAFR,OAGER,EAASM,GACTJ,EAAQM,GAJV,4CAJiD,sBAcjD,OAJKT,GAAUE,GAVkC,mCAW/CQ,GAIA,cAACf,EAAWgB,SAAZ,CAAqBC,MAAO,CAAEZ,QAAOE,QAArC,SACGJ,I,OCrBQ,SAASe,IACtBC,SAASC,MAAQ,UACjB,MDC2BC,qBAAWrB,GCDtC,EAAMK,MAAN,EAAaE,KAKb,OAAO,KCXT,IAYee,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,UACE,cAAC,EAAD,QAGJiB,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.d4b5b5d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cleanTrain.7375f7e8.csv\";","export default __webpack_public_path__ + \"static/media/cleanTest.bae5db0f.csv\";","import React, { createContext, useContext, useState } from \"react\";\r\n// import * as dfd from \"danfojs\";\r\nimport * as d3 from \"d3\";\r\nimport trainCsv from \"../data/cleanTrain.csv\";\r\nimport testCsv from \"../data/cleanTest.csv\";\r\n\r\nconst DataContex = createContext();\r\nexport const useData = () => useContext(DataContex);\r\n\r\nexport default function DataProvider({ children }) {\r\n  const [train, setTrain] = useState(null);\r\n  const [test, setTest] = useState(null);\r\n\r\n  async function wrapReadData() {\r\n    const trn = await d3.csv(trainCsv);\r\n    const tst = await d3.csv(testCsv);\r\n    setTrain(trn);\r\n    setTest(tst);\r\n  }\r\n  if (!train || !test) {\r\n    wrapReadData();\r\n  }\r\n\r\n  return (\r\n    <DataContex.Provider value={{ train, test }}>\r\n      {children}\r\n    </DataContex.Provider>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { useData } from \"./components/DataProvider.js\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nexport default function App() {\n  document.title = \"titanic\";\n  let { train, test } = useData();\n\n  if (train && test) {\n  }\n\n  return null;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport DataProvider from \"./components/DataProvider.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}